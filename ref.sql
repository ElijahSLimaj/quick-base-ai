-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.chunks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  content_id uuid,
  text text NOT NULL,
  embedding USER-DEFINED,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chunks_pkey PRIMARY KEY (id),
  CONSTRAINT chunks_content_id_fkey FOREIGN KEY (content_id) REFERENCES public.content(id)
);
CREATE TABLE public.content (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  website_id uuid,
  source_url text NOT NULL,
  content text NOT NULL,
  chunked_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  site_url text,
  last_crawled_at timestamp with time zone,
  next_crawl_at timestamp with time zone,
  crawl_frequency interval DEFAULT '30 days'::interval,
  auto_crawl_enabled boolean DEFAULT true,
  pages_count integer DEFAULT 1,
  CONSTRAINT content_pkey PRIMARY KEY (id),
  CONSTRAINT content_project_id_fkey FOREIGN KEY (website_id) REFERENCES public.websites(id)
);
CREATE TABLE public.crawl_jobs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  project_id uuid,
  site_url text NOT NULL,
  job_type text NOT NULL CHECK (job_type = ANY (ARRAY['auto'::text, 'manual'::text])),
  scheduled_at timestamp with time zone NOT NULL,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'running'::text, 'completed'::text, 'failed'::text])),
  pages_crawled integer DEFAULT 0,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT crawl_jobs_pkey PRIMARY KEY (id),
  CONSTRAINT crawl_jobs_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.websites(id)
);
CREATE TABLE public.organization_invites (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  email text NOT NULL,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['admin'::text, 'member'::text])),
  permissions jsonb DEFAULT '{}'::jsonb,
  token text NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '7 days'::interval),
  invited_by uuid NOT NULL,
  invited_at timestamp with time zone DEFAULT now(),
  accepted_at timestamp with time zone,
  accepted_by uuid,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'expired'::text, 'revoked'::text])),
  message text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT organization_invites_pkey PRIMARY KEY (id),
  CONSTRAINT organization_invites_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT organization_invites_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id),
  CONSTRAINT organization_invites_accepted_by_fkey FOREIGN KEY (accepted_by) REFERENCES auth.users(id)
);
CREATE TABLE public.organizations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  slug text UNIQUE,
  description text,
  stripe_customer_id text UNIQUE,
  plan_name text NOT NULL DEFAULT 'trial'::text CHECK (plan_name = ANY (ARRAY['trial'::text, 'starter'::text, 'pro'::text, 'enterprise'::text])),
  seat_count integer DEFAULT 1,
  max_seats integer DEFAULT 1,
  additional_seats integer DEFAULT 0,
  settings jsonb DEFAULT '{}'::jsonb,
  owner_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT organizations_pkey PRIMARY KEY (id),
  CONSTRAINT organizations_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.queries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  website_id uuid,
  question text NOT NULL,
  answer text NOT NULL,
  confidence numeric NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT queries_pkey PRIMARY KEY (id),
  CONSTRAINT queries_project_id_fkey FOREIGN KEY (website_id) REFERENCES public.websites(id)
);
CREATE TABLE public.query_feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  query_id uuid,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  feedback text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT query_feedback_pkey PRIMARY KEY (id),
  CONSTRAINT query_feedback_query_id_fkey FOREIGN KEY (query_id) REFERENCES public.queries(id)
);
CREATE TABLE public.subscriptions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  website_id uuid,
  plan text NOT NULL,
  status text NOT NULL,
  usage_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  plan_type text NOT NULL DEFAULT 'free'::text,
  sites_limit integer DEFAULT 1,
  answers_limit integer DEFAULT 500,
  crawls_limit integer DEFAULT 1,
  manual_recrawls_limit integer DEFAULT 2,
  auto_crawl_enabled boolean DEFAULT false,
  current_period_start timestamp with time zone DEFAULT now(),
  current_period_end timestamp with time zone DEFAULT (now() + '1 mon'::interval),
  trial_ends_at timestamp with time zone,
  trial_started_at timestamp with time zone,
  stripe_subscription_id text,
  CONSTRAINT subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT subscriptions_project_id_fkey FOREIGN KEY (website_id) REFERENCES public.websites(id)
);
CREATE TABLE public.team_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text])),
  permissions jsonb DEFAULT '{"manage_team": false, "view_tickets": true, "create_tickets": true, "manage_billing": false, "manage_tickets": false, "view_analytics": false}'::jsonb,
  invited_by uuid,
  invited_at timestamp with time zone DEFAULT now(),
  joined_at timestamp with time zone,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'active'::text, 'disabled'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT team_members_pkey PRIMARY KEY (id),
  CONSTRAINT team_members_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT team_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT team_members_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id)
);
CREATE TABLE public.ticket_attachments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  ticket_id uuid NOT NULL,
  message_id uuid,
  filename text NOT NULL,
  original_filename text NOT NULL,
  file_path text NOT NULL,
  file_size integer NOT NULL,
  mime_type text NOT NULL,
  file_extension text,
  uploaded_by uuid,
  customer_email text,
  upload_source text DEFAULT 'dashboard'::text CHECK (upload_source = ANY (ARRAY['dashboard'::text, 'email'::text, 'widget'::text, 'api'::text])),
  is_public boolean DEFAULT false,
  is_internal boolean DEFAULT false,
  scan_status text DEFAULT 'pending'::text CHECK (scan_status = ANY (ARRAY['pending'::text, 'clean'::text, 'infected'::text, 'error'::text])),
  scan_result text,
  processed_at timestamp with time zone,
  thumbnail_path text,
  text_content text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  CONSTRAINT ticket_attachments_pkey PRIMARY KEY (id),
  CONSTRAINT ticket_attachments_ticket_id_fkey FOREIGN KEY (ticket_id) REFERENCES public.tickets(id),
  CONSTRAINT ticket_attachments_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.ticket_messages(id),
  CONSTRAINT ticket_attachments_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES auth.users(id)
);
CREATE TABLE public.ticket_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  ticket_id uuid NOT NULL,
  message text NOT NULL,
  message_type text NOT NULL DEFAULT 'reply'::text CHECK (message_type = ANY (ARRAY['reply'::text, 'note'::text, 'status_change'::text, 'assignment'::text])),
  user_id uuid,
  customer_email text,
  customer_name text,
  author_type text NOT NULL CHECK (author_type = ANY (ARRAY['team'::text, 'customer'::text, 'system'::text])),
  is_internal boolean DEFAULT false,
  is_first_response boolean DEFAULT false,
  content_type text DEFAULT 'text'::text CHECK (content_type = ANY (ARRAY['text'::text, 'html'::text, 'markdown'::text])),
  attachments jsonb DEFAULT '[]'::jsonb,
  email_message_id text,
  in_reply_to text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  read_at timestamp with time zone,
  read_by uuid,
  CONSTRAINT ticket_messages_pkey PRIMARY KEY (id),
  CONSTRAINT ticket_messages_ticket_id_fkey FOREIGN KEY (ticket_id) REFERENCES public.tickets(id),
  CONSTRAINT ticket_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT ticket_messages_read_by_fkey FOREIGN KEY (read_by) REFERENCES auth.users(id)
);
CREATE TABLE public.tickets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  website_id uuid NOT NULL,
  organization_id uuid,
  ticket_number text NOT NULL UNIQUE,
  title text NOT NULL,
  description text NOT NULL,
  status text NOT NULL DEFAULT 'open'::text CHECK (status = ANY (ARRAY['open'::text, 'in_progress'::text, 'waiting_customer'::text, 'resolved'::text, 'closed'::text])),
  priority text NOT NULL DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])),
  category text DEFAULT 'general'::text CHECK (category = ANY (ARRAY['general'::text, 'technical'::text, 'billing'::text, 'feature_request'::text, 'bug_report'::text, 'integration'::text])),
  assigned_to uuid,
  assigned_at timestamp with time zone,
  customer_email text,
  customer_name text,
  customer_user_id uuid,
  original_query text,
  ai_response text,
  ai_confidence numeric,
  escalation_reason text,
  resolution text,
  resolution_time_minutes integer,
  customer_satisfaction_rating integer CHECK (customer_satisfaction_rating >= 1 AND customer_satisfaction_rating <= 5),
  customer_satisfaction_feedback text,
  first_response_at timestamp with time zone,
  first_response_time_minutes integer,
  sla_breach boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  closed_at timestamp with time zone,
  CONSTRAINT tickets_pkey PRIMARY KEY (id),
  CONSTRAINT tickets_website_id_fkey FOREIGN KEY (website_id) REFERENCES public.websites(id),
  CONSTRAINT tickets_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT tickets_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES auth.users(id),
  CONSTRAINT tickets_customer_user_id_fkey FOREIGN KEY (customer_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.usage_tracking (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  project_id uuid,
  period_start timestamp with time zone NOT NULL,
  period_end timestamp with time zone NOT NULL,
  answers_used integer DEFAULT 0,
  crawls_used integer DEFAULT 0,
  manual_recrawls_used integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT usage_tracking_pkey PRIMARY KEY (id),
  CONSTRAINT usage_tracking_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.websites(id)
);
CREATE TABLE public.websites (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  domain text NOT NULL,
  owner_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  settings jsonb DEFAULT '{}'::jsonb,
  stripe_customer_id text,
  subscription_id text,
  sites jsonb DEFAULT '[]'::jsonb,
  organization_id uuid,
  plan_name text DEFAULT 'trial'::text CHECK (plan_name = ANY (ARRAY['trial'::text, 'starter'::text, 'pro'::text, 'enterprise'::text])),
  CONSTRAINT websites_pkey PRIMARY KEY (id),
  CONSTRAINT projects_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id),
  CONSTRAINT websites_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);